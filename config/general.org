* Global Settings
** Be less annoying and more nice
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p) ; brevity is the soul of wit
  (setq inhibit-startup-message t
    ;; When upgrading emacs to 28, uncomment
    ;; Silence compiler warnings as they can be pretty disruptive
    ;; comp-async-report-warnings-errors nil
    gc-cons-threshold 20000000 ; default is 800KB, set to 200MB
    read-process-output-max 3000000 ;; incr data read from process. default is 4kb.
    require-final-newline t ; Whether to add a newline automatically at the end of the file.
    next-line-add-newlines t ; add newline on C-n at EOF
    vc-follow-symlinks 't ; What to do if visiting a symbolic link to a file under version control.
    ring-bell-function 'ignore)
  ;; reminder: setq-default: affects global default; setq: sets local value;  all buffers;
  (setq-default indent-tabs-mode nil ; prefer spaces not tabs
    fill-column 75
    dired-listing-switches "-alh" ; add human-readable units
    tab-width 2
    c-basic-offset 2) ; programming modes often use this
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  ;; Put backups~ and #autosaves# in /tmp
  ;; also look at https://github.com/emacscollective/no-littering/blob/master/no-littering.el
  ;; why not used: meh
  (setq backup-directory-alist
    `((".*" . ,temporary-file-directory))
    auto-save-file-name-transforms
    `((".*" ,temporary-file-directory t)))
#+end_src
** Setting to determine what system Emacs is running on
#+begin_src emacs-lisp
  ;;(require 'subr-x)
  (setq linux-p
    (eq system-type 'gnu/linux))
  ;; (setq guix-p
  ;;   (and linux-p) (check-guix-somehow))
#+end_src
** Turn theses modes off
#+begin_src emacs-lisp
  (auto-composition-mode 0) ; turn off (small diff): text characters automatically composed by functions registered in composition-function-table
  (blink-cursor-mode 0) ; annoying blinking cursor
  (file-name-shadow-mode 0) ; dims unused parts of files in minibuffer
  (line-number-mode 0) ; clutter mode line
  (tool-bar-mode 0)
  (set-fringe-mode 0) ;; smaller fringe
  (menu-bar-mode 0)
  (column-number-mode 0)
  (electric-pair-mode 0) ;; prefer smartparens (more complex tho)
  (scroll-bar-mode 0)
  (set-window-scroll-bars (minibuffer-window) nil nil) ; why scroll bar in minibuffer
  (setq visible-bell 0)
#+end_src

** Emacs played in minor key
N2R: Some of these are on by default; explicitness seems good.
#+begin_src emacs-lisp
  (auto-compression-mode 1) ; auto-handle (un)?zip on visit zipped file
  (auto-encryption-mode 1) ; automatic file (en|de)cryption
  (delete-selection-mode 1) ; delete region on entry
  (electric-indent-mode 1) ; auto-indent on enter
  (global-auto-revert-mode 1) ; revert buffers when file changes on disk; convenient.
  (setq global-auto-revert-non-file-buffers t
    auto-revert-verbose nil)
  (global-display-line-numbers-mode) ; not to be confused with line-number-mode
  (global-font-lock-mode 1) ; decorate text
  (global-hl-line-mode 1) ; highlight current line
  (global-visual-line-mode) ; wrap long lines
  (mouse-wheel-mode 1) ; allow scroll by mouse-wheel
  (transient-mark-mode) ; don't hide active selected region

  (winner-mode)
  (global-set-key (kbd "C-x w f") 'winner-redo)
  (global-set-key (kbd "C-x w b") 'winner-undo)

  ;; Set frame transparency, maximize screen by default
  (defvar tk/frame-transparency '(95 . 95))
  (set-frame-parameter nil 'alpha tk/frame-transparency)
  (set-frame-parameter nil 'fullscreen 'maximized)
  ;; put in default frame settings
  (add-to-list 'default-frame-alist `(alpha . ,tk/frame-transparency))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
* Unset keys
Explicitly unset some keys that aren't very useful, reserving them for future personal use patterns.
#+begin_src emacs-lisp
  ;; Use this for apps: eshell, dired, spotify, signal, telegram, twitter, stack exchange, etc.
  (global-unset-key (kbd "C-r"))
  ;; tbd what I'll do with these
  (global-unset-key (kbd "C-o"))
  (global-unset-key (kbd "C-;")) ; decorate text, sp-wrap
  (global-unset-key (kbd "C-j"))
  (global-unset-key (kbd "M-r"))
  (global-unset-key (kbd "M-'")) ; avy jump
  (global-unset-key (kbd "M-i"))
  (global-unset-key (kbd "M-o"))
  (global-unset-key (kbd "M-p"))
  (global-unset-key (kbd "M-r"))
  ;(global-unset-key (kbd "C-l")) ;;
  ;(global-unset-key (kbd "M-j")) ;; actually useful
  ;; back already? consider unsetting M-c,M-l,M-u,M-h,M-q.
#+end_src
* Notes about mode maps
** Defaults
- M-g movement by line
- M-s special searches
- C-x 8 special characters
** Packages and mine
- C-M-. Movement by smartparens
- C-x v diff-hl
- C-c ! flycheck
* Appearance
** Fonts
It's =pragma 'nov 2021'=. Get yourself some nice ligatures with [[https://github.com/tonsky/FiraCode][Fira Code]].
Also see: [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][ligature.el]], for ligature settings, as of Emacs 28.
#+begin_src emacs-lisp
  (defvar tk/default-font-size 105)
  (defvar tk/default-variable-font-size 105)
  (set-face-attribute 'default nil :font "Fira Code Retina" :height tk/default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height tk/default-font-size)
  ;(ligature-set-ligatures 't '("www"))
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height tk/default-variable-font-size :weight 'regular)
  (global-prettify-symbols-mode 1) ; lambda -> symbol
  (use-package fira-code-mode
  :custom (fira-code-mode-disabled-ligatures '("[]" "x"))  ; ligatures you don't want
  :hook prog-mode)
#+end_src
** All the [[https://github.com/domtronn/all-the-icons.el][Icons]]
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
  ;; run this once to install fonts
  ;;(all-the-icons-install-fonts)
#+end_src
** Theme [[https://github.com/bbatsov/solarized-emacs][sol-theme]].
Also see [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][doom]] themes.
#+begin_src emacs-lisp
  (use-package solarized-theme
    :config
    (load-theme 'solarized-gruvbox-dark t))
#+end_src
** [[https://github.com/cyrus-and/zoom][zoom]] - rebalance awkwardly balanced window divisions
#+begin_src emacs-lisp
	(use-package zoom
    :config
    (zoom-mode 1))
#+end_src

** [[https://github.com/dgutov/diff-hl][diff-hl]] - highlight changes since last git commit
#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (global-diff-hl-amend-mode))
#+end_src

** Slightly nicer mode line [[https://github.com/tarsius/moody][moody]].
Also see [[https://github.com/seagle0128/doom-modeline][doom]] modeline.
#+begin_src emacs-lisp
  ;; (use-package moody)
  ;; (moody-replace-mode-line-buffer-identification)
  ;; (moody-replace-eldoc-minibuffer-message-function)
  ;; (moody-replace-vc-mode) ; branch info
  ;; (setq moody-mode-line-height 25)
#+end_src
** [[https://github.com/Wilfred/helpful][Helpful]] - make emacs help buffers better
#+begin_src emacs-lisp
	(use-package helpful)
#+end_src
** [[https://github.com/Malabarba/beacon][Beacon]]: pulse line when changing buffer
#+begin_src emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1)
    ;; make blink small, fast
    (setq beacon-color "#f4a460"
      beacon-size 10
      beacon-blink-duration 0.2
      beacon-blink-delay 0.2))
#+end_src
* Eshell - convenient emacs lisp compatible shell, install fish-like [[https://github.com/dieggsy/esh-autosuggest/][autosuggest]]
#+begin_src emacs-lisp
  (use-package esh-autosuggest
    :config
    (add-hook 'eshell-mode-hook
    (lambda ()
      ;; enable password caching
      ;; https://emacs.stackexchange.com/questions/5608/how-to-let-eshell-remember-sudo-password-for-two-minutes
      (require 'em-tramp)
      (setq eshell-prefer-lisp-functions t)
      (setq eshell-prefer-lisp-variables t)
      ;; also need to set an alias: alias sudo 'eshell/sudo $*'
      (setq password-cache t) ;; enable passwd caching
      (setq password-cache-expiry 600) ; for 10 minutes
      (setq eshell-history-size 10000
        eshell-buffer-maximum-lines 10000
        eshell-scroll-to-bottom-on-input t)
      (local-set-key (kbd "M-p") 'eshell-previous-matching-input-from-input)
      (local-set-key (kbd "M-n") 'eshell-next-matching-input-from-input)
      (esh-autosuggest-mode)
      )))
#+end_src
** Eshell tips
*** [[https://masteringemacs.org/article/complete-guide-mastering-eshell][this]] link tldr's useful eshell stuff:
- how eshell interacts with the OS
- subshells
- elisp commands (try: Ch f eshell/*)
- aliases, eg: =alias ff 'find-file $1'=
- pseudo-devices: try overwriting =dev/clip= or =/dev/kill=.
- [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][the]] manual
* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]] - simple, useful directory explorer, good regexp search replace
Most useful: replace a regexp across multiple files.
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
    (lambda ()
      (local-set-key (kbd "C-%") 'dired-do-query-replace-regexp)
      (local-set-key (kbd "M-%") 'dired-do-find-regexp-and-replace)
      ))
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode)
    )
#+end_src
* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][Abbrevs]] - often used to correct spelling errors
#+begin_src emacs-lisp
  (setq abbrev-file-name             ;; tell emacs where to read abbrev
    "~/.emacs.d/.abbrev_defs.el"
  save-abbrevs 'silent)        ;; save abbrevs when files are saved
  (setq-default abbrev-mode t)
#+end_src
* Path adjustments
Sometimes the PATH shell var isn't set correctly. Use this area to modify that. Maybe worth restarting emacs (closing and re-opening) before fiddling with this. Also try =eshell/addpath=.
#+begin_src emacs-lisp
  (setenv "PATH" (concat (getenv "PATH") ":/home/thor/.nvm/versions/node/v17.0.1/bin"))
  (setq exec-path (append exec-path '("/home/thor/.nvm/versions/node/v17.0.1/bin")))
  (setenv "PATH" (concat (getenv "PATH") ":/home/thor/.cargo/bin"))
  (setq exec-path (append exec-path '("/home/thor/.cargo/bin")))
  (setenv "NVM_DIR" "~/.nvm")
#+end_src
* Authentication and passphrases
[[https://www.gnu.org/software/emacs/manual/html_mono/auth.html][Auth source manual]]. In a nutshell, store passwords in =auth-sources= files in a given format:
- =machine mymachine login myloginname password mypassword port myport=
A golden quote: "90% of Emacs users have unusual setups and the remaining 10% are really unusual".
[[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][The mastering emacs]] post on setting this up was okay.
[[https://jherrlin.github.io/posts/emacs-gnupg-and-pass/][This guy]]  is doing hard mode, but documents reasonably well. Don't use pinentry though, it deprecated.
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
  ;; the following two lines enable GnuPG passphrase prompting in the minibuffer.
  ;; see the answer by Y.E.
  ;; note that the pinentry package is deprecated for GnuPG >= 2.1  https://emacs.stackexchange.com/questions/32881/enabling-minibuffer-pinentry-with-emacs-25-and-gnupg-2-1-on-ubuntu-xenial
  ;; step 2, adding allow-emacs-pinentry not necessary on linux
  (require 'epg)
  (setq epg-pinentry-mode 'loopback)
  ;; store passwords in .authinfo.gpg, and get them with my-fetch-passwords.
  ;; See messaging.org for examples.
  ;; https://github.com/emacs-circe/circe/wiki/Configuration
  (defun my-fetch-password (&rest params)
    """Usage: Put a line in my auth file (~/.authinfo.gpg), then load:
       (my-fetch-password :user <login> :machine <machine>) """
    (require 'auth-source)
    (let ((match (car (apply 'auth-source-search params))))
      (if match
        (let ((secret (plist-get match :secret)))
          (if (functionp secret)
            (funcall secret)
            secret))
        (error "Password not found for %S" params))))
#+end_src
