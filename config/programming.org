* Magit git interface, Forge git(hub|lab) interface
#+begin_src emacs-lisp
  (use-package magit)
  (use-package forge
    :after magit)
  (setq auth-sources '("~/.authinfo.gpg"))
#+end_src
[[https://magit.vc/][magit]]. [[https://magit.vc/manual/forge/][forge]]. [[https://magit.vc/manual/forge/][forge manual]]. Setup requires ~/authinfo.gpg.

** Why forge, not $x:
0. Don't leave emacs. Write text in an editor that makes sense.
1. Abstract (github|gitlab) to "some_forge".

* Flycheck error information on the fly
#+begin_src emacs-lisp
  (use-package flycheck)
  (global-flycheck-mode 1)
#+end_src

* Company-mode text-completion
#+begin_src emacs-lisp
  (use-package company)
  (use-package company-prescient)
  (add-hook 'after-init-hook 'global-company-mode)
  (add-hook 'company-mode-hook
    (lambda ()
      (setq company-idle-delay 0.5) ;; how long to wait until popup
      (setq company-minimum-prefix-length 1)
      (company-prescient-mode)
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)
      (define-key company-active-map (kbd "M-n") 'company-select-last)
      (define-key company-active-map (kbd "M-p") 'company-select-first)
      ))
#+end_src
[[http://company-mode.github.io/][company]].

* Treemacs - interact w dir structure in sidebar
#+begin_src emacs-lisp
  (use-package treemacs)
  (use-package treemacs-projectile)
  (add-hook 'treemacs-mode-hook (lambda () (local-set-key (kbd "M-p") 'avy-goto-char)))
#+end_src
[[https://github.com/Alexander-Miller/treemacs][treemacs]]. Btw, great hydra example.

* LSP
#+begin_src emacs-lisp
(setq lsp-keymap-prefix "M-n")
(use-package lsp-mode
  :hook (rustic-mode . lsp)
  :commands lsp)
(use-package lsp-ui :commands lsp-ui-mode)
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
(setq lsp-completion-provider :capf) ; completion backend
(setq lsp-idle-delay 0.2) ; refresh highlights
(setq lsp-ui-peek-always-show t)
#+end_src
[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]]. [[https://emacs-lsp.github.io/lsp-mode/page/installation/][setup-instructions]].

* Prog mode
#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
(add-hook 'prog-mode-hook
  (lambda ()
    (local-set-key [f8] 'yas-visit-snippet-file)
    (local-set-key (kbd "<C-f8>") 'yas-new-snippet)
    (local-set-key (kbd "C-h <f8>") 'yas-describe-tables)
    (local-set-key (kbd "<C-f8>") 'yas-new-snippet)
    (subword-mode) ; ThisStuffIsFiveWords on M-f M-b
    (eldoc-mode) ; definitions appear in minibuffer (redundant with global-eldoc-mode)
    (hs-minor-mode) ; code folding
    (show-paren-mode) ; higlight matching parens pairs at point
    (use-package rainbow-delimiters) ; Pretty rainbows for the grown man's S-expr's
    (rainbow-delimiters-mode)
    (use-package yasnippet)
    (use-package yasnippet-snippets)
    (yas-reload-all)
    (yas-minor-mode)
    ))
#+end_src
 [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]]. [[https://github.com/joaotavora/yasnippet][yasnippet]]. [[https://github.com/AndreaCrotti/yasnippet-snippets][collection]].

* Prog mode keybinds
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
    (lambda ()
      (local-set-key [f4] 'flycheck-next-error)
      (local-set-key (kbd "<C-f4>") 'flycheck-previous-error)
      (local-set-key [f5] 'tk-comment-dwim)
    ))
#+end_src
** hs (hide-show) mode keymaps (Cc @) is awful
I generally prefer the other way of defining maps, but I have an example of this for self-reference
#+begin_src emacs-lisp
  (setq hs-hide-comments nil) ; hide comments on hs-hide-all
  (define-key prog-mode-map (kbd "C-]") 'hs-toggle-hiding)
  (define-key prog-mode-map (kbd "M-]") 'hs-hide-all)
  (define-key prog-mode-map (kbd "C-}") 'hs-show-block)
  (define-key prog-mode-map (kbd "M-}") 'hs-hide-block)
  (define-key prog-mode-map (kbd "C-M-]") 'hs-show-all)
#+end_src
[[https://www.emacswiki.org/emacs/HideShow][hide-show]].
* Yas and company temp dump
A temporary dump for some code I may find useful soon. from
https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/#code-navigation
intended to make yas play nice with company.
: #+begin_src emacs-lisp
(defun company-yasnippet-or-completion ()
  (interactive)
  (or (do-yas-expand)
      (company-complete-common)))

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "::") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))
: #+end_src
