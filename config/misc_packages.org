* [[https://github.com/Fuco1/smartparens][Smart Parens]] > electric-pair-mode or paredit for parens matching; note =Mx sp-cheat-sheet=

Movement and transformations based on sexps is paradigm for text editing, whenever there are nested levels of sexp's. Most useful for any sort of programming. Takes about 2 hours to learn and an hour to set up. [[https://github.com/Fuco1/smartparens/wiki][Wiki]].
#+begin_src emacs-lisp
	(use-package smartparens)
  (require 'smartparens-org)
  (smartparens-global-mode 1)
  (add-hook 'smartparens-mode-hook
    (lambda ()
      ;; smart movement
      (local-set-key (kbd "C-M-a") 'sp-beginning-of-sexp)
      (local-set-key (kbd "C-M-e") 'sp-end-of-sexp)
      (local-set-key (kbd "C-M-f") 'sp-forward-sexp)
      (local-set-key (kbd "C-M-b") 'sp-backward-sexp)
      (local-set-key (kbd "C-M-n") 'sp-down-sexp)
      (local-set-key (kbd "C-M-p") 'sp-up-sexp) ; confusing
      ;; use this to delete matching sexp
      (local-set-key (kbd "M-[") 'sp-backward-unwrap-sexp)
      (local-set-key (kbd "M-]") 'sp-unwrap-sexp)
      ;; move sexp limits
      (local-set-key (kbd "<C-right>") 'sp-forward-slurp-sexp)
      (local-set-key (kbd "<M-right>") 'sp-backward-slurp-sexp)
      (local-set-key (kbd "<C-left>") 'sp-forward-barf-sexp)
      (local-set-key (kbd "<M-left>") 'sp-backward-barf-sexp)
      (local-set-key (kbd "C-M-t") 'sp-transpose-sexp)
      (local-set-key (kbd "C-x C-t") 'sp-transpose-hybrid-sexp)
      ;; kill
      (local-set-key (kbd "C-M-k") 'sp-kill-sexp)
      (local-set-key (kbd "C-k") 'sp-kill-hybrid-sexp)
      (local-set-key (kbd "M-k") 'sp-backward-kill-sexp)
      (local-set-key (kbd "C-M-w") 'sp-copy-sexp)
      (local-set-key (kbd "C-M-d") 'sp-delete-word)
      ;; back-o space-o
      (local-set-key (kbd "C-<backspace>") 'sp-backward-kill-word)
      (local-set-key (kbd "M-<backspace>") 'backward-kill-word)

      (local-set-key (kbd "C-c (") 'sp-wrap-round)
      (local-set-key (kbd "C-c {") 'sp-wrap-curly)
      (local-set-key (kbd "C-c [") 'sp-wrap-square)
      ;; custom pairs, do this:
      (sp-pair "`" "`" :wrap "C-`" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
      ))
 ;;(sp-local-pair 'org-mode "\\left(" "\\right)" :insert "C-b l" :trigger "\\l(")
 (sp-with-modes 'org-mode
  (sp-local-pair "*" "*"
                 :unless '(sp-point-after-word-p sp-point-at-bol-p)
                 :skip-match 'sp--org-skip-asterisk)
  (sp-local-pair "_" "_" :unless '(sp-point-after-word-p))
  (sp-local-pair "/" "/" :unless '(sp-point-after-word-p sp-org-point-after-left-square-bracket-p) :post-handlers '(("[d1]" "SPC"))) ;; deletes the matching pair if I press space
  (sp-local-pair "~" "~" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
  (sp-local-pair "=" "=" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC"))))
#+end_src

* =sx= Browse stack exchange
Surprisingly powerful.
#+begin_src emacs-lisp
(use-package sx
  :config
  (bind-keys :prefix "C-r s"
    :prefix-map my-sx-map
    :prefix-docstring "Global keymap for SX."
    ("q" . sx-tab-all-questions)
    ("i" . sx-inbox)
    ("o" . sx-open-link)
    ("u" . sx-tab-unanswered-my-tags)
    ("a" . sx-ask)
    ("s" . sx-search)))
#+end_src
[[https://github.com/vermiculus/sx.el/][sx]].

* =free-keys= Show what keys are unbound, v useful
#+begin_src emacs-lisp
(use-package free-keys)
#+end_src
[[https://github.com/Fuco1/free-keys][free-keys]].
* =re-builder= - Build and test regex
#+begin_src emacs-lisp
(use-package re-builder)
#+end_src
[[https://www.emacswiki.org/emacs/ReBuilder][re-builder]].
* [[https://github.com/hayamiz/twittering-mode][twittering-mode]]
#+begin_src emacs-lisp
  (use-package twittering-mode
    :config
    (bind-keys :prefix "C-r t"
    :prefix-map my-twit-mode
    :prefix-docstring "Global keymap for twit mode."
      ("t" . twit)
      ("p" . twittering-update-status-from-pop-up-buffer)
      ))
#+end_src

* =undo-tree= - Visualize undo history tree (wow, cool): =C-x u=
#+begin_src emacs-lisp
  (use-package undo-tree)
  (global-undo-tree-mode)
#+end_src
[[https://www.emacswiki.org/emacs/UndoTree][undo-tree]].
* =pop-win= - less annoying help and compilation buffers
Not currently using; useful to customize how compilation buffers appear.
#+begin_src emacs-lisp
  ;(use-package popup) ; not making use atm. Creates dropdown ui.
  (use-package popwin)
  (popwin-mode 1)
  ;; popup buffers, if I want to use them
  (setq popwin:popup-window-position 'right)
#+end_src
[[https://github.com/emacsorphanage/popwin][popwin]]. [[https://github.com/auto-complete/popup-el][popup]].

* [[https://github.com/atykhonov/emacs-howdoi][howdoi]] - deprecated; package unfunctional, not maintained
