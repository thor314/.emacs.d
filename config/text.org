* Text-mode hook
#+begin_src emacs-lisp
	(add-hook 'text-mode-hook
		(lambda ()
			(turn-on-auto-fill)
			(setq sentence-end-double-space nil) ; single space after periods
			(setq line-number-mode nil)
			;; note: turn flyspell mode on for syntax highlighting
			(local-set-key (kbd "<f9>") 'flyspell-goto-next-error)
			(local-set-key (kbd "C-<f9>") 'flyspell-correct-word)
			(local-set-key (kbd "M-<f9>") 'flyspell-correct-previous-word)
			(local-set-key (kbd "C-M-<f9>") 'flyspell-mode)
			))
#+end_src
Ispell support packages: Hunspell and Hunspell-english sold separately.

* Tags
Default tags available in org files. Syntax =?x= for literal ASCII value of x.
#+begin_src emacs-lisp
(setq org-tag-alist '(("dev" . ?d) ("pers" . ?p) ("write" . ?w) ("rsch" . ?r) ("main" . ?m) ("mint" . ?M) ("misc" . ?z)))
#+end_src
[[https://orgmode.org/manual/Tags.html#Tags][tags]].
* Agenda
[[https://github.com/alphapapa/org-super-agenda][look into super agenda eventually]].
#+begin_src emacs-lisp
	(setq org-agenda-files '("~/org/agenda" ))
(setq org-agenda-custom-commands ; options - todo, tags, tags-todo
	'(("d" "Dev" tags-todo "DEV")
		 ("w" "Write" tags-todo "WRITE")
		 ("e" "Emacs" tags-todo "EMACS")
		 ("p" "Personal" tags-todo "PERS")
		 ("r" "Research" tags-todo "RSCH")
		 ("z" "Misc" tags-todo "MISC")
		 ("m" "Main" tags-todo "MAIN")
		 ("M" "Mintbase" tags-todo "MINT")
		 ))
(setq org-agenda-start-on-weekday nil) ; start today
(setq org-journal-enable-agenda-integration t) ; if I make a todo in journal, stick it into agenda
(setq org-agenda-start-on-weekday nil) ; start today, a weird day
#+end_src
[[https://orgmode.org/manual/Agenda-Views.html][agenda]].

* Journal
#+begin_src emacs-lisp
	(use-package org-journal)
	(setq org-journal-dir "~/org/journal")
#+end_src
[[https://github.com/bastibe/org-journal][org-journal]].

* Capture
Annoyance: Org-capture does not save window configuration. I should pull the org-capture repo to emulate org-agenda
save-window-config.
#+begin_src emacs-lisp
	(setq org-default-notes-file (concat org-directory "/notes.org")) ; capture
(setq org-capture-templates
	'(
		 ("d" "Dev" entry (file+headline "~/org/agenda/dev.org" "Dev")
			 "* TODO \t %? :DEV:\nAdded: %u" :empty-lines 1 )
		 ("w" "Write" entry (file+headline "~/org/agenda/write.org" "Write")
			 "* TODO [#A] \t %? :MAIN:DEV:\nAdded: %u" :empty-lines 1 )
		 ("e" "Emacs" entry (file+headline "~/org/agenda/emacs.org" "Emacs")
			 "* TODO \t %? :EMACS:\nAdded: %u" :empty-lines 1 )
		 ("p" "Personal" entry (file+headline "~/org/agenda/pers.org" "Pers")
			 "* TODO \t %? :PERS:\nAdded: %u" :empty-lines 1 )
		 ("r" "Research" entry (file+headline "~/org/agenda/rsch.org" "Rsch")
			 "* TODO \t %? :RSCH:\nAdded: %u" :empty-lines 1 )
		 ("z" "Misc todo" entry (file+headline "~/org/agenda/misc.org" "Misc")
			 "* TODO \t %? :MISC:\nAdded: %u:" :empty-lines 1 )
		 ("M" "Mintbase" entry (file+headline "~/org/agenda/mintbase.org" "Mintbase")
			 "* TODO \t %? :MINT:\nAdded: %u" :empty-lines 1 )
		 ;; ("M" "Main Dev" entry (file+headline "~/org/agenda/main.org" "Main")
		 ;; 	"* TODO \t %? :MAIN:DEV:\nAdded: %u" :empty-lines 1 )
		 ;; ("R" "Main Rsch" entry (file+headline "~/org/agenda/main.org" "Main")
		 ;; 	"* TODO [#A] \t %? :MAIN:RSCH:\nAdded: %u" :empty-lines 1 )
		 ("i" "Idea" entry (file "~/org/cap/ideas.org")
			 "* \t %? :IDEA:\nAdded: %u" )
		 ("n" "QNote" entry (file "~/org/cap/qnote.org")
			 "* \t %? :QNOTE: \nAdded: %u" )
		 ))
#+end_src

** Notes on org capture template.
See [[https://www.gnu.org/software/emacs/manual/html_node/org/Template-elements.html#Template-elements][this]] for option elements, and [[https://www.gnu.org/software/emacs/manual/html_node/org/Template-expansion.html#Template-expansion][this]] for template escape sequences.
Usage: (key description type target template properties)
types: entry (org node), item (plain list item at location), checkitem (checkbox
item), table-line, plain
templates: [[https://orgmode.org/manual/Template-expansion.html#Template-expansion][many]]
targets: file "file", id "existing id", file+headline "file" "node", datetree, clock
properties: prepend, empty-lines, clock-in/keep/resume,
time-prompt, tree-type, table-line-pos
%? = point;
%i = initial content
%a = location stored from ; %l = literal
%x,c = put pastebin, killring head
%k title of currently clocked task; K = link to
: %^g prompt for tags; G completion all tags all agenda files
: %^t prompt date, T,u,U
: %^{PROPMT|default|completion2|...} pick from a sequence of prompts
%t = datestamp; T= time+datestamp; u,U = inactive timestamps - don't cause item
 to show up in agenda

* Images via =org-download=
Drag images into org or dired buffers. Saves in a folder in dir called images.
#+begin_src emacs-lisp
(use-package org-download)
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
[[https://github.com/abo-abo/org-download][org-download]].

* Key binds
#+begin_src emacs-lisp
	(add-hook 'org-mode-hook
		(lambda ()
			(local-set-key (kbd "<f1> e") 'tk-org-insert-lisp-block)
			(local-set-key (kbd "<f1> r") 'tk-org-insert-rust-block)
			(local-set-key (kbd "<f1> d") 'insert-date)
			(local-set-key (kbd "C-'") 'avy-goto-char) ; overwrite switch agenda files
			(local-set-key (kbd "C-,") 'ivy-switch-buffer)
			(local-set-key (kbd "C-.") 'other-window)
			))
#+end_src

* =org-mobile=  Sync's my org directories to my phone.
#+begin_src emacs-lisp
	(use-package org-mobile-sync)
	(setq org-mobile-inbox-for-pull "~/org/org_mobile_pull_inbox.org")
	(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-mobile-files '("~/org/agenda" "~/org/cap"  "~/org/note"))
  ; automate push if emacs is idle for 30s and on emacs exit
  (run-with-idle-timer 30 nil 'org-mobile-push)
  (add-hook 'kill-emacs-hook 'org-mobile-push)
#+end_src
[[https://mobileorg.github.io/features/][org-mobile]].

* Settings
#+begin_src emacs-lisp
	(add-hook 'org-mode-hook
		(lambda ()
			(setq org-src-fontify-natively t) ; font-lock src if org recognizes the code block
			(setq org-src-tab-acts-natively t)
  		(setq org-adapt-indentation nil) ; turn off special indentation in org subsections
			(setq org-directory "~/org")
			(setq org-log-done 'time) ; timstamp when TODO - DONE
			))
#+end_src

* Font lock
#+begin_src emacs-lisp
	(add-hook 'org-mode-hook ; mostly just an example
		(lambda ()
			(font-lock-add-keywords nil '(("\\<\\(thor\\|THOR\\|tk\\|TK\\)\\>" 1 font-lock-warning-face t)))
			))
#+end_src
* EXPERIMENTAL poly mode for nice code blocks in org and markdown
#+begin_src emacs-lisp
  (use-package polymode)
	(use-package poly-org)
  (add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))
	(use-package poly-markdown)
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
#+end_src
[[https://polymode.github.io/usage/][polymode]].
