* Text-mode hook
#+begin_src emacs-lisp
  (defun tk-fmt-and-space ()
    "insert space and call fill-paragraph, so I don't have to
  call M-q all the time. Note this prevents doublespaces."
    (interactive)
    (fill-paragraph)
    (insert-char #x20))

  (add-hook 'text-mode-hook
            (lambda ()
              ;; nts. auto-fill looks nice, but makes a lot of formatting things
              ;; a pain in the ass, and I'm too lazy to fix them all.
      ;(turn-on-auto-fill)
      (setq sentence-end-double-space nil) ; single space after periods
      (setq line-number-mode nil)
      ;; note: turn flyspell mode on for syntax highlighting
      (local-set-key (kbd "M-j") 'org-meta-return)
      (local-set-key (kbd "<f9>") 'flyspell-goto-next-error)
      (local-set-key (kbd "C-<f9>") 'flyspell-correct-word)
      (local-set-key (kbd "M-<f9>") 'flyspell-correct-previous-word)
      (local-set-key (kbd "C-M-<f9>") 'flyspell-mode)
      ))
#+end_src
Ispell support packages: Hunspell and Hunspell-english sold separately.
* Markdown
I basically only use markdown for README's.
#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook
    (lambda ()
      (turn-off-auto-fill)))
#+end_src
* Tags
Default tags available in org files. Syntax =?x= for literal ASCII value of x.
#+begin_src emacs-lisp
(setq org-tag-alist '(("dev" . ?d) ("pers" . ?p) ("write" . ?w) ("rsch" . ?r) ("main" . ?m) ("mint" . ?M) ("misc" . ?z)))
#+end_src
[[https://orgmode.org/manual/Tags.html#Tags][tags]].
* Agenda
[[https://github.com/alphapapa/org-super-agenda][look into super agenda eventually]].
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/agenda" "~/org/journal"))
  (setq org-priority-default 80)
  (setq org-agenda-custom-commands ; options - todo, tags, tags-todo
    '(("d" "Dev" tags-todo "DEV")
     ("w" "Write" tags-todo "WRITE")
     ("e" "Emacs" tags-todo "EMACS")
     ("p" "Personal" tags-todo "PERS")
     ("r" "Research" tags-todo "RSCH")
     ("z" "Misc" tags-todo "MISC")
     ("m" "Main" tags-todo "MAIN")
     ))
(setq org-agenda-start-on-weekday nil) ; start today
(setq org-journal-enable-agenda-integration t) ; if I make a todo in journal, stick it into agenda
#+end_src
[[https://orgmode.org/manual/Agenda-Views.html][agenda]].

* Journal
#+begin_src emacs-lisp
  (use-package org-journal)
  (setq org-journal-dir "~/org/journal")
#+end_src
[[https://github.com/bastibe/org-journal][org-journal]].

* Capture
Annoyance: Org-capture does not save window configuration. I should pull the org-capture repo to emulate org-agenda
save-window-config.
#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org")) ; capture
  (setq org-capture-templates
    '(
     ("d" "Dev" entry (file+headline "~/org/agenda/dev.org" "Dev")
       "* TODO \t %? :DEV:\nAdded: %u" :empty-lines 1 )
     ("w" "Write" entry (file+headline "~/org/agenda/write.org" "Write")
       "* TODO [#A] \t %? :WRITE:\nAdded: %u" :empty-lines 1 )
     ("e" "Emacs" entry (file+headline "~/org/agenda/emacs.org" "Emacs")
       "* TODO \t %? :EMACS:\nAdded: %u" :empty-lines 1 )
     ("p" "Personal" entry (file+headline "~/org/agenda/pers.org" "Pers")
       "* TODO \t %? :PERS:\nAdded: %u" :empty-lines 1 )
     ("r" "Research" entry (file+headline "~/org/agenda/rsch.org" "Rsch")
       "* TODO \t %? :RSCH:\nAdded: %u" :empty-lines 1 )
     ("z" "Misc todo" entry (file+headline "~/org/agenda/misc.org" "Misc")
       "* TODO \t %? :MISC:\nAdded: %u:" :empty-lines 1 )
     ("M" "Mintbase" entry (file+headline "~/org/agenda/mintbase.org" "Mintbase")
       "* TODO \t %? :MINT:\nAdded: %u" :empty-lines 1 )
     ;; ("M" "Main Dev" entry (file+headline "~/org/agenda/main.org" "Main")
     ;;   "* TODO \t %? :MAIN:DEV:\nAdded: %u" :empty-lines 1 )
     ;; ("R" "Main Rsch" entry (file+headline "~/org/agenda/main.org" "Main")
     ;;   "* TODO [#A] \t %? :MAIN:RSCH:\nAdded: %u" :empty-lines 1 )
     ("i" "Idea" entry (file "~/org/cap/ideas.org")
       "* \t %? :IDEA:\nAdded: %u" )
     ("n" "QNote" entry (file "~/org/cap/qnote.org")
       "* \t %? :QNOTE: \nAdded: %u" )
     ))
#+end_src

** Notes on org capture template.
See [[https://www.gnu.org/software/emacs/manual/html_node/org/Template-elements.html#Template-elements][this]] for option elements, and [[https://www.gnu.org/software/emacs/manual/html_node/org/Template-expansion.html#Template-expansion][this]] for template escape sequences.
Usage: (key description type target template properties)
types: entry (org node), item (plain list item at location), checkitem (checkbox
item), table-line, plain
templates: [[https://orgmode.org/manual/Template-expansion.html#Template-expansion][many]]
targets: file "file", id "existing id", file+headline "file" "node", datetree, clock
properties: prepend, empty-lines, clock-in/keep/resume,
time-prompt, tree-type, table-line-pos
%? = point;
%i = initial content
%a = location stored from ; %l = literal
%x,c = put pastebin, killring head
%k title of currently clocked task; K = link to
: %^g prompt for tags; G completion all tags all agenda files
: %^t prompt date, T,u,U
: %^{PROPMT|default|completion2|...} pick from a sequence of prompts
%t = datestamp; T= time+datestamp; u,U = inactive timestamps - don't cause item
 to show up in agenda

* Images via =org-download=
Drag images into org or dired buffers. Saves in a folder in dir called images.
#+begin_src emacs-lisp
(use-package org-download)
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
[[https://github.com/abo-abo/org-download][org-download]].

* Org-specific keybinds
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
    (lambda ()
      (local-set-key (kbd "C-c C-r") 'org-schedule)
      (local-set-key (kbd "<f1> e") 'tk-org-insert-lisp-block)
      (local-set-key (kbd "<f1> r") 'tk-org-insert-rust-block)
      (local-set-key (kbd "<f1> d") 'insert-date)
      (global-set-key (kbd "<f1> d") 'insert-date) ; experiment on blocking emacs overwrite 2021-08-30
      (local-set-key (kbd "C-'") 'avy-goto-char) ; overwrite switch agenda files
      (local-set-key (kbd "C-,") 'ivy-switch-buffer)
      (local-set-key (kbd "C-.") 'other-window)
      ))
#+end_src

* =org-mobile=  Sync's my org directories to my phone. - BUG: prevents quit until Dropbox installed
:#+begin_src emacs-lisp
  (use-package org-mobile-sync)
  (setq org-mobile-inbox-for-pull "~/org/org_mobile_pull_inbox.org")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-mobile-files '("~/org/agenda" "~/org/cap"  "~/org/note"))
  ; automate push if emacs is idle for 30s and on emacs exit
  (run-with-idle-timer 30 nil 'org-mobile-push)
  (add-hook 'kill-emacs-hook 'org-mobile-push)
: #+end_src
[[https://mobileorg.github.io/features/][org-mobile]].

* Org-roam - Cc n [lfgic]
[[https://www.orgroam.com/manual/][docs]] and [[https://github.com/org-roam/org-roam][source]].
** Setup
Create a file: Org roam find file
#+begin_src emacs-lisp
  (setq org-roam-v2-ack t)
  (use-package org-roam)
  (add-hook 'org-mode-hook
    (lambda ()
      (setq company-mode nil) ;; gets annoying with text completes
      (local-set-key (kbd "C-c n r") 'org-roam)
      (local-set-key (kbd "C-c n n") 'org-roam-ref-add)
      (local-set-key (kbd "C-c n i") 'org-roam-insert)
      (local-set-key (kbd "C-c n I") 'org-roam-insert-immediate)
      (local-set-key (kbd "C-c n f") 'org-roam-find-file)
      (local-set-key (kbd "C-c n g") 'org-roam-graph)
      (local-set-key (kbd "C-c n a") 'org-roam-tag-add)
      (local-set-key (kbd "C-c n d") 'org-roam-tag-delete)
      ))

  ;; enables org-roam on startup
  ;(add-hook 'after-init-hook 'org-roam-mode) ; 2021-08-30 no such org roam mode
  (setq org-roam-directory "~/org/roam")
  (setq org-roam-completion-system 'ivy)
  ;; optional index file keeps links to main files
  ;; (setq org-roam-index-file "index.org")
#+end_src

** roam-capture templates [[https://www.orgroam.com/manual.html#Template-Walkthrough][docs]]
#+begin_src emacs-lisp
  (setq org-roam-capture--file-name-default "<%Y-%m%-%d>-${slug}")
  (setq org-roam-capture-templates
    '(
       ("c" "concept" plain "%?"
         :if-new (file+head "concept/%<%Y-%m-%d>-${slug}.org"
                   "#+title: ${title}\n#+filetags: :concept:\n* ")
         :unnarrowed t)

       ;; structure for reviews
       ("w" "week review" plain "%?"
         :if-new (file+head "review/week/%<%Y-%m-%d>-week_review-${slug}.org"
                   "#+title: Week Review %<%Y-%m-%d> \n#+filetags: :week_review:
* ${slug} In Review
** Biggest Changes
** Free Write
** Concepts
** Projects in Review
** Projects for this Month
** PPRESH check-in
*** Professional -
*** Projects -
*** Romantic -
*** Emotional -
*** Social -
*** Health -
  ")
         :unnarrowed t)
       ("m" "month review" plain "%?"
         :if-new (file+head "review/month/%<%Y-%m-%d>-month_review.org"
                   "#+title: Month Review %<%Y-%m-%d> \n#+filetags: :month_review:
* ${slug} In Review
** Biggest Changes
** Free Write
** Concepts
** Projects in Review
** Projects for this Month
** PPRESH check-in
*** Professional -
*** Projects -
*** Romantic -
*** Emotional -
*** Social -
*** Health -
")
         :unnarrowed t)
       ("q" "quarter review" plain "%?"
         :if-new (file+head "review/quarter/%<%Y-%m-%d>-week_review-${slug}.org"
                   "#+title: Quarter Review %<%Y-%m-%d> \n#+filetags: :quarter_review:
* ${slug} In Review
** Biggest Changes
** Free Write
** Concepts
** Projects in Review
** Projects for this Month
** PPRESH check-in
*** Professional -
*** Projects -
*** Romantic -
*** Emotional -
*** Social -
*** Health -
")
         :unnarrowed t)
       ("y" "year review" plain "%?"
         :if-new (file+head "review/year/%<%Y-%m-%d>-month_review-${slug}.org"
                   "#+title: Year Review  %<%Y-%m-%d> \n#+filetags: :year_review:
* ${slug} In Review
** Biggest Changes
** Free Write
** Concepts
** Projects in Review
** Projects for this Month
** PPRESH check-in
*** Professional -
*** Projects -
*** Romantic -
*** Emotional -
*** Social -
*** Health -
")
         :unnarrowed t)

       ;; want article and paper to ask for a link
       ("a" "article" plain "%?"
           :if-new (file+head "lit/article/%<%Y-%m-%d>-{slug}.org"
                              ":PROPERTIES:
:ROAM_REFS: %^{reference}
:END:
#+filetags: :article:\n#+title: ${title}\n* ")
           :unnarrowed t)
       ("p" "article" plain "%?"
           :if-new (file+head "lit/paper/%<%Y-%m-%d>-{slug}.org"
                              ":PROPERTIES:
:ROAM_REFS: %^{reference}
:END:
#+filetags: :paper:\n#+title: ${title}\n* ")
           :unnarrowed t)
       ))
#+end_src

* Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
    (lambda ()
      (setq org-src-fontify-natively t) ; font-lock src if org recognizes the code block
      (setq org-src-tab-acts-natively t)
      (setq org-adapt-indentation nil) ; turn off special indentation in org subsections
      (setq org-directory "~/org")
      (setq org-log-done 'time) ; timstamp when TODO - DONE
      ))
#+end_src

* Font lock
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook ; mostly just an example
    (lambda ()
      (font-lock-add-keywords nil '(("\\<\\(thor\\|THOR\\|tk\\|TK\\)\\>" 1 font-lock-warning-face t)))
      ))
#+end_src
* Poly mode for native code blocks in org and markdown
#+begin_src emacs-lisp
  (use-package polymode)
  (use-package poly-org)
  (add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))
  (use-package poly-markdown)
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
#+end_src
[[https://polymode.github.io/usage/][polymode]].
