* Text-mode hook
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook
    (lambda ()
      ;; nts. auto-fill looks nice, but makes a lot of formatting things
      ;; a pain in the ass, and I'm too lazy to fix them all.
                                        ;(turn-on-auto-fill)
      (setq sentence-end-double-space nil) ; single space after periods
      (setq line-number-mode nil)
      ;; note: turn flyspell mode on for syntax highlighting
      (local-set-key (kbd "M-j") 'org-meta-return)
      (local-set-key (kbd "<f9>") 'flyspell-goto-next-error)
      (local-set-key (kbd "C-<f9>") 'flyspell-correct-word)
      (local-set-key (kbd "M-<f9>") 'flyspell-correct-previous-word)
      (local-set-key (kbd "C-M-<f9>") 'flyspell-mode)
      ))
#+end_src
Ispell support packages: Hunspell and Hunspell-english sold separately.
* Markdown
I basically only use markdown for README's.
#+begin_src emacs-lisp
  (add-hook 'markdown-mode-hook
    (lambda ()
      (turn-off-auto-fill)))
#+end_src
* Tags
Default tags available in org files. Syntax =?x= for literal ASCII value of x.
#+begin_src emacs-lisp
(setq org-tag-alist '(("dev" . ?d) ("pers" . ?p) ("write" . ?w) ("rsch" . ?r) ("main" . ?m) ("misc" . ?z)))
#+end_src
[[https://orgmode.org/manual/Tags.html#Tags][tags]].
* Agenda
[[https://github.com/alphapapa/org-super-agenda][look into super agenda eventually]].
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/agenda/"))
  (setq org-priority-default 80)
  (setq org-agenda-custom-commands ; options - todo, tags, tags-todo
    '(("d" "Dev" tags-todo "DEV")
     ("w" "Write" tags-todo "WRITE")
     ("e" "Emacs" tags-todo "EMACS")
     ("p" "Personal" tags-todo "PERS")
     ("r" "Research" tags-todo "RSCH")
     ("z" "Misc" tags-todo "MISC")
     ("m" "Main" tags-todo "MAIN")
     ))

  (setq org-journal-enable-agenda-integration t) ; if I make a todo in journal, stick it into agenda
  (add-hook 'org-agenda-mode-hook
    (lambda ()
      (setq org-agenda-start-on-weekday nil) ; start today
      (setq org-agenda-hide-tags-regexp ".*")
      (setq org-agenda-include-deadlines t)
      (setq org-agenda-include-diary t)
      (setq org-agenda-loop-over-headlines-in-active-region nil)
      (setq org-agenda-restore-windows-after-quit t)
      (setq org-agenda-skip-deadline-if-done t)
      (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
      (setq org-agenda-start-on-weekday nil)
      (setq org-agenda-todo-ignore-deadlines 'far)
      (setq org-journal-enable-agenda-integration t)
      ))
#+end_src
[[https://orgmode.org/manual/Agenda-Views.html][agenda]].

* Journal
#+begin_src emacs-lisp
  (use-package org-journal)
  (setq org-journal-dir "~/org/journal")
  (setq org-journal-file-format "%Y%m%d.org")
#+end_src
[[https://github.com/bastibe/org-journal][org-journal]].

* Images via =org-download=
Drag images into org or dired buffers. Saves in a folder in dir called images.
#+begin_src emacs-lisp
  (use-package org-download)
  (add-hook 'dired-mode-hook 'org-download-enable)
#+end_src
[[https://github.com/abo-abo/org-download][org-download]].

* Org-specific keybinds
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
    (lambda ()
      ;(org-mode-add-electric-pairs)
      (local-set-key (kbd "C-c C-r") 'org-schedule)
      (local-set-key (kbd "<f1> e") 'tk-org-insert-lisp-block)
      (local-set-key (kbd "<f1> p") 'tk-org-insert-python-block)
      (local-set-key (kbd "<f1> r") 'tk-org-insert-rust-block)
      (local-set-key (kbd "<f1> d") 'insert-date)
      (global-set-key (kbd "<f1> d") 'insert-date) ; experiment on blocking emacs overwrite 2021-08-30
      (local-set-key (kbd "C-'") 'avy-goto-char) ; overwrite switch agenda files
      (local-set-key (kbd "C-,") 'ivy-switch-buffer)
      (local-set-key (kbd "C-.") 'other-window)
      ))
#+end_src

* Org-roam- Cc n [lfgic]
[[https://www.orgroam.com/manual/][docs]] and [[https://github.com/org-roam/org-roam][source]].
** Setup
Create a file: Org roam find file
#+begin_src emacs-lisp
  (setq org-roam-v2-ack t)
  (use-package org-roam)
  (add-hook 'org-mode-hook
    (lambda ()
      (setq company-mode nil) ;; gets annoying with text completes
      (local-set-key (kbd "C-c n r") 'org-roam)
      (local-set-key (kbd "C-c n n") 'org-roam-ref-add)
      (local-set-key (kbd "C-c n i") 'org-roam-insert)
      (local-set-key (kbd "C-c n I") 'org-roam-insert-immediate)
      (local-set-key (kbd "C-c n f") 'org-roam-find-file)
      (local-set-key (kbd "C-c n g") 'org-roam-graph)
      (local-set-key (kbd "C-c n a") 'org-roam-tag-add)
      (local-set-key (kbd "C-c n d") 'org-roam-tag-delete)
      ))

  ;; enables org-roam on startup
  ;(add-hook 'after-init-hook 'org-roam-mode) ; 2021-08-30 no such org roam mode
  (setq org-roam-directory "~/org/roam")
  (setq org-roam-completion-system 'ivy)
  ;; optional index file keeps links to main files
  ;; (setq org-roam-index-file "index.org")
#+end_src

* Settings
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
    (lambda ()
      (setq org-src-fontify-natively t) ; syntax-highlight if org recognizes src block
      (setq org-src-tab-acts-natively t) ; use programming major modes in src blocks
      (setq org-adapt-indentation nil) ; turn off special indentation in org subsections
      (setq org-directory "~/org")
      (setq org-log-done 'time) ; timstamp when TODO - DONE
      ))
#+end_src
* Poly mode for native code blocks in org and markdown
#+begin_src emacs-lisp
  (use-package polymode)
  (use-package poly-org)
  (add-to-list 'auto-mode-alist '("\\.org" . poly-org-mode))
  (use-package poly-markdown)
  (add-to-list 'auto-mode-alist '("\\.md" . poly-markdown-mode))
#+end_src
[[https://polymode.github.io/usage/][polymode]].
* Font lock - highlighting, for when I want it
: #+begin_src emacs-lisp
  (add-hook 'org-mode-hook ; mostly just an example
    (lambda ()
      (font-lock-add-keywords nil '(("\\<\\(thor\\|THOR\\|tk\\|TK\\)\\>" 1 font-lock-warning-face t)))
      ))
#+end_src

* =org-mobile=  Sync's my org directories to my phone. - BUG: prevents quit until Dropbox installed
:#+begin_src emacs-lisp
  (use-package org-mobile-sync)
  (setq org-mobile-inbox-for-pull "~/org/org_mobile_pull_inbox.org")
  (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
  (setq org-mobile-files '("~/org/agenda" "~/org/cap"  "~/org/note"))
  ; automate push if emacs is idle for 30s and on emacs exit
  (run-with-idle-timer 30 nil 'org-mobile-push)
  (add-hook 'kill-emacs-hook 'org-mobile-push)
: #+end_src
[[https://mobileorg.github.io/features/][org-mobile]].

* Electric Pair mode (auto-match pairs)
https://stackoverflow.com/questions/27871876/custom-pairs-in-emacs-electric-pair-mode
Commented out 2021-11-05, too inconsistently useful.
#+begin_src emacs-lisp
  ;(defvar tk-org-mode-electric-pairs '((?= . ?=)  "Custom electric pairs for org-mode."))
  ;(defun org-mode-add-electric-pairs ()
    ;(setq-local electric-pair-pairs (append electric-pair-pairs tk-org-mode-electric-pairs))
    ;(setq-local electric-pair-text-pairs electric-pair-pairs))
#+end_src
